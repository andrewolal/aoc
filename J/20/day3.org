Explanation for Day 3.

We have a slope of trees that wraps around horizontally. We ski down
it in a straight line and need to find how many trees we hit.

The idea for solving it will be to calculate the path indices, modulo
the width of the scene, and index back to find the trees. First
parsing the trees:

#+begin_src J :session :exports both
trees =: '#'&=;._2 aoc 2020 3 [ load '~/code/aoc/aoc.ijs'
#+end_src

#+RESULTS:

Conjunction cut (~;.~) is used to split the input by lines. ~_2~ tells
it to use the last character as the delimiter and it applies the verb
'#'&= to each line, representing trees as 1 and empty space as 0.

Now skiing:

#+begin_src J :session :exports both
ski =: [: +/ ] {~ [: <"1 $@] |"1 i.@<.@(%~&{.$@]) */ [
#+end_src

#+RESULTS:

which is a bit convoluted. Though J executes from the right, I'll
start from the left. 

+ Cap ~[:~ controls how functions are applied. Given function ~[: f
  g~, applied to arguments like ~x ([: f g) y~ it gives
  ~f(g(x,y))~. All that to say the last thing we do is sum the trees
  we hit at the end.
+ ~] {~ [: <"1~ says to index into the grid (right argument ~]~) the
  indices. Boxing ~<~ is how index ~{~ knows we're indexing by point
  and not by row.
+ ~$@] |"1~ is modulo (~|~) based on the shape of the grid (~$@]~),
  handling the wrapping around aspect. ~|"1~ says to modulo row-wise
  (necessary to fit length 2 vector with length heightx2 indices).
+ Now for getting the steps. The number of hops that can be done is
  the height of the grid divided by the step in height. We get this
  from ~(%~&{. $@])~. The dimensions here are height then width, so we
  divide the height of the grid by the height of the from by ~%~&{.~
  which takes the head of its arguments before dividing. Again we get
  the shape of the grid from ~$@]~. With that, we can get the first n
  steps from ~i.@<.@(%~&{. $@])~. We get the indices of the steps by
  multiplying with our slope: ~i.@<.@(%~&{. $@]) */ [~.

To be concrete with example slope 2 down and 1 to right:

#+begin_src J :session :exports both :verb 0!:1
2 1 ($@]) trees                      NB. shape of grid
2 1 (%~&{.$@]) trees                 NB. height of grid divided by step size
2 1 i.@>.@(%~&{.$@]) trees           NB. numbers 0 to 161 for steps
5 {. 2 1 (i.@>.@(%~&{.$@])*/[) trees NB. the indices (only showing 5)
#+end_src

#+RESULTS:
#+begin_example
   2 1 ($@]) trees                      NB. shape of grid
323 31
   2 1 (%~&{.$@]) trees                 NB. height of grid divided by step size
161.5
   2 1 i.@>.@(%~&{.$@]) trees           NB. numbers 0 to 161 for steps
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88...
   5 {. 2 1 (i.@>.@(%~&{.$@])*/[) trees NB. the indices (only showing 5)
0 0
2 1
4 2
6 3
8 4
#+end_example

To solve part 2, we take our list of slopes and do the calculation on
every two, ~_2 f\ y~ applies ~f~ to non-overlapping infixes of legnth
2 of ~y~.

#+begin_src J :session :exports both :verb 0!:1
_2 (ski&trees)\ 1 1  1 3  1 5  1 7  2 1
*/ _2 (ski&trees)\ 1 1  1 3  1 5  1 7  2 1
#+end_src

#+RESULTS:
:    _2 (ski&trees)\ 1 1  1 3  1 5  1 7  2 1
: 78 178 75 86 39
:    */ _2 (ski&trees)\ 1 1  1 3  1 5  1 7  2 1
: 3492520200
